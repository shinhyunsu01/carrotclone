// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"

}

model User {
  id        Int       @id @default(autoincrement())
  phone     String?   @unique
  email     String?   @unique
  name      String
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Token     Token[]
  products  Product[]
  post      Post[]
  answers   Answer[]

  wondering Wondering[]
  Review    Review[]

  writtenReviews  Review[] @relation(name: "writtenReviews")
  receivedReviews Review[] @relation(name: "receivedReviews")

  fav      Fav[]
  sales    Sale[]
  purchase Purchase[]
  record   Record[]
  streams  Stream[]
  messages Message[]

}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //db 에 안들어감
  userId    Int // db 저장
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  image       String
  description String @db.MediumText
  name        String
  price       Int

  favs     Fav[]
  sales    Sale[]
  purchase Purchase[]
  record   Record[]
}

model Fav {
  id Int @id @default(autoincrement())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?

  question String   @db.MediumText //데이터 베이스 길이 제한
  answers  Answer[]

  wondering Wondering[]

  longitude Float?
  latitude  Float?
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  answer String @db.MediumText
  postId Int
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    String   @db.MediumText

  createdBy   User @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int

  createdFor   User  @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  User         User? @relation(fields: [userId], references: [id])
  userId       Int?

  score Int @default(1)
}

model Sale {
  id Int @id @default(autoincrement())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id Int @id @default(autoincrement())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Record {
  id Int @id @default(autoincrement())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  kind      Kind
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String    @db.MediumText
  price       Int
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  message String @db.MediumText

  stream   Stream? @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int
}
